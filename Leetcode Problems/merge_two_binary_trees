# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    
    def bfs_traversal(self, tree_node):
        queue = []
        output = []
        if tree_node is not None:
            queue.append(tree_node)
            current_node = tree_node
            output.append(tree_node.val)
        
        while len(queue) > 0:
            # While there are still nodes left to traverse
            
            current_node = queue.pop(0)
            # print(current_node.val)
            
            if current_node.left is None and current_node.right is None:
                return output
            
            # Used for the traversal
            # queue.append(current_node.left)
            # queue.append(current_node.right)
            
            
            if current_node.left is None:
                output.append(None)
            else:
                output.append(current_node.left.val)
                queue.append(current_node.left)
                
            if current_node.right is None:
                output.append(None)
                
            else:
                output.append(current_node.right.val)
                
                queue.append(current_node.right)
            
           
        return output
        
        
        
    def mergeTrees(self, t1, t2):
        """
        :type t1: TreeNode
        :type t2: TreeNode
        :rtype: TreeNode
        """
        
        first_list = self.bfs_traversal(t1)
        second_list = self.bfs_traversal(t2)
        
        larger_list = first_list if len(first_list) > len(second_list) else second_list
        smaller_list = first_list if len(second_list) >= len(first_list) else second_list
        
        for _ in range(len(larger_list) - len(smaller_list)):
                       smaller_list.append(None)
                      
                       
        
        i, j = 0 , 0
        
        combined_list = []
        
        print(larger_list, smaller_list)
        while i < len(smaller_list) and j < len(larger_list):
            first_element, second_element = first_list[i], second_list[j]
            
            
            if first_element is not None and second_element is not None:
                sum_value = first_element + second_element
                combined_list.append(sum_value)
                
            elif first_element is None and second_element is None:
                combined_list.append(None)
                
            else:
                existing_element = first_element if first_element is not None else second_element
                combined_list.append(existing_element)
                
            i += 1
            
            j += 1
                
        print(combined_list)


 def mergeTrees(self, t1, t2):
        """
        :type t1: TreeNode
        :type t2: TreeNode
        :rtype: TreeNode
        """
        if t1 == None:
            return t2
        if t2 == None:
            return t1
        t1.val+=t2.val

        # Recursively build trees
        t1.left = self.mergeTrees(t1.left, t2.left)
        t1.right = self.mergeTrees(t1.right, t2.right)
        return t1
                
                
        
        